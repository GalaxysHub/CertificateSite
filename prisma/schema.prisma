// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  tests         Test[]
  attempts      TestAttempt[]
  certificates  Certificate[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TestCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  type        TestCategoryType
  tests       Test[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Test {
  id           String       @id @default(cuid())
  title        String
  description  String?
  categoryId   String
  category     TestCategory @relation(fields: [categoryId], references: [id])
  difficulty   Difficulty   @default(BEGINNER)
  level        String?      // For CEFR levels (A1, A2, B1, B2, C1, C2) or other level systems
  duration     Int          // in minutes
  passingScore Int          @default(70) // percentage needed to pass
  totalQuestions Int        @default(25)
  questions    Question[]
  attempts     TestAttempt[]
  certificates Certificate[]
  isPublished  Boolean      @default(false)
  createdBy    String
  creator      User         @relation(fields: [createdBy], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Question {
  id              String   @id @default(cuid())
  testId          String
  test            Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  question        String
  type            QuestionType
  options         Json?    // For multiple choice questions
  correctAnswer   String
  explanation     String?
  points          Int      @default(1)
  order           Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model TestAttempt {
  id          String   @id @default(cuid())
  testId      String
  test        Test     @relation(fields: [testId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  answers     Json     // Store user answers
  score       Float
  totalPoints Int
  passed      Boolean
  startedAt   DateTime
  completedAt DateTime?
  certificate Certificate? // One-to-one relation with certificate
  createdAt   DateTime @default(now())
}

model Certificate {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  testAttemptId     String?  @unique // Link to specific test attempt
  testAttempt       TestAttempt? @relation(fields: [testAttemptId], references: [id])
  testId            String?  // Optional, for test-based certificates
  test              Test?    @relation(fields: [testId], references: [id])
  verificationCode  String   @unique // Unique verification code
  title             String
  description       String?
  recipientName     String
  testName          String?
  score             Float?
  proficiencyLevel  String?  // e.g., "Beginner", "Intermediate", "Advanced", "A1", "B2", etc.
  issueDate         DateTime @default(now())
  expiryDate        DateTime?
  templateType      CertificateTemplate @default(STANDARD)
  qrCodeData        String?  // QR code data for verification
  certificateData   Json     // Additional certificate details
  filePath          String?  // Path to generated PDF file
  downloadCount     Int      @default(0)
  viewCount         Int      @default(0)
  emailSent         Boolean  @default(false)
  emailSentAt       DateTime?
  issuedBy          String
  isValid           Boolean  @default(true)
  revokedAt         DateTime?
  revokedReason     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Audit trail
  auditLogs         CertificateAuditLog[]
}

model CertificateAuditLog {
  id            String   @id @default(cuid())
  certificateId String
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
  action        CertificateAction
  performedBy   String?  // User ID who performed the action
  ipAddress     String?
  userAgent     String?
  details       Json?    // Additional action details
  createdAt     DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}

enum CertificateTemplate {
  STANDARD
  PROFESSIONAL
  ACADEMIC
  TECHNICAL
  LANGUAGE_PROFICIENCY
}

enum CertificateAction {
  GENERATED
  VIEWED
  DOWNLOADED
  EMAILED
  VERIFIED
  REVOKED
  RESTORED
}

enum TestCategoryType {
  LANGUAGE
  PROFESSIONAL
  TECHNICAL
  ACADEMIC
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}
